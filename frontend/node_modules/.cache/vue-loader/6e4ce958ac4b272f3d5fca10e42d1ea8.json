{"remainingRequest":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/frontend/src/components/QueryComponent.vue?vue&type=template&id=667080c5&","dependencies":[{"path":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/frontend/src/components/QueryComponent.vue","mtime":1677417559972},{"path":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}