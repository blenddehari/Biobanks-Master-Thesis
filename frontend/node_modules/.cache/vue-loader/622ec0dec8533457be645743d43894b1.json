{"remainingRequest":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/fronted/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/fronted/src/components/QueryComponent.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/fronted/src/components/QueryComponent.vue","mtime":1638039891265},{"path":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/fronted/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/fronted/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/fronted/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/fronted/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dehble/Desktop/Biobanks demo/Databanks-demo-project/fronted/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJ1dHRvbiB7CiAgICBtYXJnaW4tbGVmdDogMmVtCn0KCi5ncmFkaWVudEJ1dHRvbiB7CiAgICBtaW4taGVpZ2h0OiA0OHB4ICFpbXBvcnRhbnQ7CiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMGRlZywgI2VmZWZlZiAwJSwgI2ZmZmZmZiAxMDAlKSAhaW1wb3J0YW50OwogICAgYm9yZGVyOiB0aGluICNkZGRkZGQgc29saWQgIWltcG9ydGFudDsKICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDsKICAgIC8qanVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQgIWltcG9ydGFudDsqLwogICAgYWxpZ24taXRlbXM6IGNlbnRlciAhaW1wb3J0YW50OwogICAgYm9yZGVyLXJhZGl1czogNXB4ICFpbXBvcnRhbnQ7CiAgICBmb250LWZhbWlseTogIkludGVyIjsKICAgIGZvbnQtc2l6ZTogMTJwdCAhaW1wb3J0YW50OwogICAgdGV4dC10cmFuc2Zvcm06IG5vbmUgIWltcG9ydGFudDsKICAgIGxldHRlci1zcGFjaW5nOiAwcHggIWltcG9ydGFudDsKfQoKLmNvbWJvYm94IHsKICAgIHdpZHRoOiA1MCU7CiAgICBtYXJnaW4tbGVmdDogMmVtOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwp9CgoudGV4dC1maWVsZC1uYW1lIHsKICAgIHdpZHRoOiA1MCU7CiAgICBtYXJnaW4tbGVmdDogMmVtOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwp9CgouaGVscGVySWNvbnMgewogICAgY3Vyc29yOiBwb2ludGVyOwp9Ci5yb3VuZCB7CiAgLXdlYmtpdC1ib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAxcHg7CiAgLXdlYmtpdC1ib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMnB4OwogIC13ZWJraXQtYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDNweDsKICAtd2Via2l0LWJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDRweDsKCiAgLW1vei1ib3JkZXItcmFkaXVzLXRvcGxlZnQ6IDFweDsKICAtbW96LWJvcmRlci1yYWRpdXMtdG9wcmlnaHQ6IDJweDsKICAtbW96LWJvcmRlci1yYWRpdXMtYm90dG9tcmlnaHQ6IDNweDsKICAtbW96LWJvcmRlci1yYWRpdXMtYm90dG9tbGVmdDogNHB4OwoKICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAxcHg7CiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDJweDsKICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogM3B4OwogIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDRweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAgI0QzRDNEMzsKICBib3JkZXItcmFkaXVzOiAxMDAlOwogIC8qIHdpZHRoOiAxMDAlOyAqLwogIHBhZGRpbmc6IDAuMmVtOwogIHBhZGRpbmctYm90dG9tOiAwLjNlbTsKICBtYXJnaW46IDAuMmVtOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQoKLmZvcm0gewogICAgbWFyZ2luLXRvcDogMmVtCn0K"},{"version":3,"sources":["QueryComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgSA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"QueryComponent.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div>\n    <ErrorAlert v-model=\"errorTitle\">{{ errorDetail }}</ErrorAlert>\n    <ErrorAlert v-model=\"successTitle\" type=\"success\">{{ successDetail }}</ErrorAlert>\n    <v-progress-linear v-show=\"isLoading\" indeterminate color=\"primary\" rounded height=\"5\" striped>\n    </v-progress-linear>\n\n\n    <div v-for=\"(input, index) in inputs\" :key=\"index\">\n        <v-form class=\"form\">\n            <v-container>\n                <v-row style=\"margin-left:-2em\" justify=\"start\">\n\n                    <v-col cols=\"12\" sm=\"6\"  md=\"3\">\n                        <v-text-field v-model=\"input.name\" label=\"Attribute name\" solo ></v-text-field>\n                    </v-col>\n\n                    <v-col cols=\"12\" sm=\"6\"  md=\"3\">\n                        <v-combobox clearable v-model=\"input.loincCode\" :items=\"loincCodes\"\n                            :item-text=\"item => item.loincnum +' ('+ item.loinccomponent + ')'\"\n                            :item-value=\"item => item.loincnum\" label=\"Search LOINC codes\" solo return-object>\n                            <template v-slot:selection=\"{ attrs, item, selected }\">\n                                <v-chip v-if=\"item === Object(item)\" v-bind=\"attrs\" color=\"lighten-3\"\n                                    :input-value=\"selected\" label small>\n                                    <span>\n                                        {{ item.loincnum }} ({{item.loinccomponent}})\n                                    </span>\n                                </v-chip>\n                            </template>\n\n                        </v-combobox>\n                    </v-col>\n\n                    <v-col cols=\"12\" sm=\"6\" md=\"3\">\n                        <v-text-field v-model=\"input.value.fromValue\" :label=\"rangeQuery ? 'FROM value' :  'Value'\"\n                            solo></v-text-field>\n                    </v-col>\n\n                    <v-col cols=\"12\" sm=\"6\" md=\"3\">\n                        <v-text-field v-show=\"rangeQuery\" v-model=\"input.value.toValue\" label=\"TO value\" solo>\n                        </v-text-field>\n\n                        <!-- This is for the icons to be in the middle of the fields -->\n                        <hr style=\"height:10px; visibility:hidden;\" />\n\n                        <span class=\"helperIcons\">\n                            <i class=\"round\" @click=\"remove(index)\" v-show=\"index || (!index && inputs.length > 1)\">\n                                <v-icon style=\"margin-right:0px\">mdi-minus</v-icon>\n                            </i>\n                            <i class=\"round\" @click=\"add(index)\" v-show=\"index == inputs.length - 1\">\n                                <v-icon style=\"margin-right:0px\">mdi-plus</v-icon>\n                            </i>\n                        </span>\n                    </v-col>\n\n                     <!-- <v-col align-self=\"baseline\" cols=\"15\"  md=\"3\">\n                         <div class=\"helperIcons\">\n                            <i class=\"round\" @click=\"remove(index)\" v-show=\"index || (!index && inputs.length > 1)\">\n                                <v-icon style=\"margin-right:0px\">mdi-minus</v-icon>\n                            </i>\n                            <i class=\"round\" @click=\"add(index)\" v-show=\"index == inputs.length - 1\">\n                                <v-icon style=\"margin-right:0px\">mdi-plus</v-icon>\n                            </i>\n                        </div>\n                     </v-col> -->\n\n                </v-row>\n\n            </v-container>\n        </v-form>\n\n        <br />\n\n    </div>\n\n    <!-- <v-btn elevation=\"2\" raised class=\"button\" v-on:click=\"toggleQueryType()\">\n        {{rangeQuery ? \"Point Query\" : \"Range Query\"}}</v-btn> -->\n\n    <br /> \n\n\n    <div>\n        <v-btn elevation=\"2\" raised class=\"button\" v-on:click=\"submit()\">\n            <v-icon style=\"margin-right:0px\">mdi-magnify</v-icon>Search\n        </v-btn>\n        <v-btn elevation=\"2\" raised class=\"button\" v-on:click=\"toggleQueryType()\">\n        {{rangeQuery ? \"Point Query\" : \"Range Query\"}}</v-btn>\n\n         <v-btn elevation=\"2\" raised class=\"button\" v-on:click=\"consoleLog()\">Console Log</v-btn>\n    </div>\n\n    <div style=\"margin: 2em; z-index:0\">\n        <v-row align=\"center\" justify=\"center\">\n            <v-col>\n                <br />\n                <br />\n                <v-label v-if=\"datasetsReady\">Ranked Results</v-label>\n                <v-data-table v-if=\"datasetsReady\" :headers=\"headers\" :items=\"datasets\" :items-per-page=\"5\"\n                    class=\"elevation-1\" style=\"margin-top:10px\" fixed-header disable-sort>\n                    <template v-slot:item=\"{ item }\">\n                        <tr>\n                            <td>{{ item.indexId }}</td>\n                            <td>{{ item.collectionId }}</td>\n                            <td>{{ item.collectionName }}</td>\n                            <td>\n                                <v-chip :color=\"getColor(item.possibleHits)\" dark>\n                                    {{ item.possibleHits }}\n                                </v-chip>\n                            </td>\n                        </tr>\n                    </template>\n                </v-data-table>\n            </v-col>\n        </v-row>\n    </div>\n</div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport ErrorAlert from './ErrorAlert.vue'\n// import { required } from 'vuelidate/lib/validators'\n\n\nexport default { \n    name: 'QueryComponent',\n    components: { ErrorAlert },\n\n      data() {\n          return {\n              isLoading: false,\n              errorTitle: '',\n              errorDetail: '',\n              successTitle: null,\n              successDetail: null,\n              inputs: [{\n                  name: '',\n                  loincCode: '',\n                  value: {\n                      fromValue: '',\n                      toValue: ''\n                  },\n              }],\n              rangeQuery: false,\n              fullPage: true,\n              loincCodes: [],\n              loincsLoaded: false,\n              datasetsReady: false,\n              datasets: [],\n              headers: [{\n                      text: 'Index ID',\n                      align: 'left',\n                      sortable: true,\n                      value: 'indexId',\n                      width: '200'\n                  },\n                  {\n                      text: 'Collection ID',\n                      value: \"collectionId\"\n                  },\n                  {\n                      text: 'Collection Name',\n                      value: \"collectionName\"\n                  },\n                  {\n                      text: 'Possible hits',\n                      value: \"possibleHits\"\n                  },\n              ],\n          }\n      },\n    //    validations: {\n    //         inputs: [{\n    //             name: {required},\n    //             loincCode: {required},\n    //             value: {\n    //                 fromValue: {required},\n    //                 tovalue: {required}\n    //             }\n\n    //         }]\n    //     },\n\n      created() {\n          this.getLoincs()\n      },\n      methods: {\n          add() {\n              this.inputs.push({\n                  name: \"\",\n                  loincCode: '',\n                  value: {\n                      fromValue: '',\n                      toValue: ''\n                  },\n              })\n          },\n          remove(index) {\n              this.inputs.splice(index, 1)\n          },\n          consoleLog() {\n            //   this.validateForm()\n            //   for (let input of this.inputs) {\n            //       if (!input.value.toValue) {\n            //           input.value['toValue'] = input.value['fromValue']\n            //       }\n            //   }\n              console.log(this.inputs)\n\n          },\n          toggleQueryType() {\n              //   let copyInputs = [... inputs]\n              //   copyInputs[index] = { rangeQuery: !rangeQuery }\n              // console.log(input)\n              // this.$set(this.inputs, index, input.rangeQuery = !input.rangeQuery)\n              this.rangeQuery = !this.rangeQuery\n          },\n          validateForm() {\n               for (let input of this.inputs) {\n                      if (input.name === \"\" || input.loincCode === \"\" || input.value.fromValue === \"\" || input.value.toValue === \"\") {\n                           this.errorTitle = 'Please fill in all the fields!'\n                           throw 'Please fill in all the fields!'\n                      } \n               }\n          },\n\n          async submit() {\n              try {\n                  this.isLoading = true\n                   for (let input of this.inputs) {\n                       if (!input.value.toValue) {\n                           input.value['toValue'] = input.value['fromValue']\n                       }\n                   }\n                  console.log(this.inputs)\n                  this.validateForm()\n                  // this.datasets = await DatasetService.getRankedDatasets()\n                  const res = await axios.get(`http://localhost:5000/api/data`)\n                  await new Promise(r => setTimeout(r, 1000));\n\n                  // this.datasets = res.data\n                  this.datasetsReady = true\n                  this.datasets = res.data\n                  this.successTitle = 'Query matched successfully!'\n                  this.successDetail = 'See ranked results in the table'\n                  this.isLoading = false\n              } catch (error) {\n                  this.isLoading = false\n                  this.errorTitle = 'Something went wrong!'\n\n                  if (error.response) {\n                      this.errorDetail = error.response.data.error;\n                  } else {\n                      this.errorDetail = error;\n                  }\n              }\n          },\n          async getLoincs() {\n              try {\n                  const res = await axios.get(`http://localhost:5000/api/loincs`)\n                  this.loincCodes = res.data\n                  this.loincsLoaded = true\n              } catch (error) {\n                  this.isLoading = false\n                  this.errorTitle = 'Something went wrong!'\n\n                  if (error.response) {\n                      this.errorDetail = error.response.data.error;\n                  } else {\n                      this.errorDetail = error;\n                  }\n              }\n          },\n          getColor(hits) {\n              if (hits > 15) return 'green'\n              else if (hits > 10) return 'orange'\n              else return 'red'\n          },\n      },\n      computed: {\n          errorMessages() {\n              return ' <span style=\"font-size:14pt;font-weight:bold;\"> ' + this.errorTitle + ' </span><br> ' + this.errorDetail;\n          },\n      }\n  }\n</script>\n\n<style>\n.button {\n    margin-left: 2em\n}\n\n.gradientButton {\n    min-height: 48px !important;\n    background: linear-gradient(0deg, #efefef 0%, #ffffff 100%) !important;\n    border: thin #dddddd solid !important;\n    display: flex !important;\n    /*justify-content: space-around !important;*/\n    align-items: center !important;\n    border-radius: 5px !important;\n    font-family: \"Inter\";\n    font-size: 12pt !important;\n    text-transform: none !important;\n    letter-spacing: 0px !important;\n}\n\n.combobox {\n    width: 50%;\n    margin-left: 2em;\n    position: relative;\n}\n\n.text-field-name {\n    width: 50%;\n    margin-left: 2em;\n    position: relative;\n}\n\n.helperIcons {\n    cursor: pointer;\n}\n.round {\n  -webkit-border-top-left-radius: 1px;\n  -webkit-border-top-right-radius: 2px;\n  -webkit-border-bottom-right-radius: 3px;\n  -webkit-border-bottom-left-radius: 4px;\n\n  -moz-border-radius-topleft: 1px;\n  -moz-border-radius-topright: 2px;\n  -moz-border-radius-bottomright: 3px;\n  -moz-border-radius-bottomleft: 4px;\n\n  border-top-left-radius: 1px;\n  border-top-right-radius: 2px;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 4px;\n  background-color:  #D3D3D3;\n  border-radius: 100%;\n  /* width: 100%; */\n  padding: 0.2em;\n  padding-bottom: 0.3em;\n  margin: 0.2em;\n  position: relative;\n}\n\n.form {\n    margin-top: 2em\n}\n</style>"]}]}